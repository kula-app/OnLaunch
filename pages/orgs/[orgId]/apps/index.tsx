import { getSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import styles from "../../../../styles/Home.module.css";

import { MdDeleteForever, MdEdit, MdVisibility } from "react-icons/md";
import type { AlertColor } from "@mui/material/Alert";
import Button from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import IconButton from "@mui/material/IconButton";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Tooltip from "@mui/material/Tooltip";
import deleteApp from "../../../../api/apps/deleteApp";
import { useApps } from "../../../../api/apps/useApps";
import { useOrg } from "../../../../api/orgs/useOrg";
import Routes from "../../../../routes/routes";
import CustomSnackbar from "../../../../components/CustomSnackbar";

export default function AppsPage() {
  const router = useRouter();

  const orgId = Number(router.query.orgId);

  const [showAlert, setShowAlert] = useState(false);
  const [alertSeverity, setAlertSeverity] = useState<AlertColor>("success");
  const [alertMessage, setAlertMessage] = useState("");

  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [appId, setAppId] = useState(-1);

  function navigateToMessagesPage(appId: number) {
    router.push(Routes.getMessagesByOrgIdAndAppId(orgId, appId));
  }

  const { apps, isError: error, mutate } = useApps(orgId);
  const { org, isError: orgError } = useOrg(orgId);

  if (error || orgError) return <div>Failed to load</div>;

  function navigateToEditAppPage(appId: number) {
    router.push(Routes.editAppForOrgIdAndAppId(orgId, appId));
  }

  function navigateToNewAppPage() {
    router.push(Routes.createNewAppForOrgId(orgId));
  }

  function handleDelete(id: number) {
    setAppId(id);
    setShowDeleteDialog(true);
  }

  async function callDeleteApp(appId: number) {
    try {
      await deleteApp(orgId, appId);

      mutate();

      setAlertMessage(`App with id '${appId}' successfully deleted!`);
      setAlertSeverity("success");
      setShowAlert(true);
    } catch (error) {
      setAlertMessage(`Error while deleting app with id ${appId}: ${error}`);
      setAlertSeverity("error");
      setShowAlert(true);
    }
  }

  return (
    <>
      <Head>
        <title>OnLaunch</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>Organisation {org?.name}</h1>
        <h1>Apps</h1>
        {org?.role === "ADMIN" && (
          <div className="addButton">
            <Button
              variant="contained"
              onClick={() => {
                navigateToNewAppPage();
              }}
            >
              New App
            </Button>
          </div>
        )}
        <Table sx={{ minWidth: 650, maxWidth: 1000 }} aria-label="simple table">
          <TableHead>
            <TableCell width="5%">
              <strong>ID</strong>
            </TableCell>
            <TableCell>
              <strong>App Name</strong>
            </TableCell>
            <TableCell width="5%" className="centeredText">
              <strong># Active Messages</strong>
            </TableCell>
            <TableCell width="5%"></TableCell>
          </TableHead>
          <TableBody>
            {apps?.map((app, index) => {
              return (
                <TableRow
                  key={index}
                  className="clickable-row"
                  onClick={() => navigateToMessagesPage(app.id)}
                >
                  <TableCell width="5%">{app.id}</TableCell>
                  <TableCell>{app.name}</TableCell>
                  <TableCell width="5%" className="centeredText">
                    <Tooltip title="this many messages are currently shown in mobile apps">
                      <div>{app.activeMessages}</div>
                    </Tooltip>
                  </TableCell>
                  <TableCell width="5%">
                    <div className="hiddenTableElement">
                      <Tooltip title="view messages">
                        <IconButton
                          onClick={() => navigateToMessagesPage(app.id)}
                        >
                          <MdVisibility />
                        </IconButton>
                      </Tooltip>
                      {app.role === "ADMIN" && (
                        <Tooltip title="edit">
                          <IconButton
                            onClick={() => navigateToEditAppPage(app.id)}
                          >
                            <MdEdit />
                          </IconButton>
                        </Tooltip>
                      )}
                      {app.role === "ADMIN" && (
                        <Tooltip title="delete">
                          <IconButton onClick={() => handleDelete(app.id)}>
                            <MdDeleteForever />
                          </IconButton>
                        </Tooltip>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
        {apps?.length == 0 && (
          <p className="marginTopMedium">no data to show</p>
        )}
        <CustomSnackbar
          message={alertMessage}
          severity={alertSeverity}
          isOpenState={[showAlert, setShowAlert]}
        />
        <Dialog
          open={showDeleteDialog}
          aria-labelledby="alert-dialog-title"
          aria-describedby="alert-dialog-description"
        >
          <DialogTitle id="alert-dialog-title">
            {`Delete App with id '${appId}?`}
          </DialogTitle>
          <DialogContent>
            <DialogContentText id="alert-dialog-description">
              This cannot be undone.
            </DialogContentText>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setShowDeleteDialog(false)}>Cancel</Button>
            <Button
              onClick={() => {
                setShowDeleteDialog(false);
                callDeleteApp(appId);
              }}
              autoFocus
            >
              Agree
            </Button>
          </DialogActions>
        </Dialog>
      </main>
    </>
  );
}

export async function getServerSideProps(context: any) {
  const session = await getSession({ req: context.req });

  if (!session) {
    return {
      redirect: {
        destination: "/auth",
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
}
