generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionType {
  DISMISS @map("dismiss")
}

enum ButtonDesign {
  TEXT   @map("text")
  FILLED @map("filled")
}

enum Role {
  USER
  ADMIN
}

model Action {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title        String
  actionType   ActionType
  buttonDesign ButtonDesign

  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  body      String
  blocking  Boolean
  startDate DateTime
  endDate   DateTime
  actions   Action[]

  app   App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId Int?
}

model App {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  publicKey String    @unique
  messages  Message[]

  organisation Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        Int?

  loggedApiRequests LoggedApiRequests[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?

  email    String?
  password String?
  salt     String?

  // only a verified user can use the functionality of OnLaunch
  isVerified Boolean
  isDeleted  Boolean @default(false)

  token               VerificationToken[]
  passwordToken       PasswordResetToken[]
  emailChangeToken    EmailChangeToken[]
  userInvitationToken UserInvitationToken[]
  orgs                UsersInOrganisations[]
}

model Organisation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  invitationToken String @unique

  apps                App[]
  users               UsersInOrganisations[]
  userInvitationToken UserInvitationToken[]
}

// this model indicates which users are in which organisation (with which role) and vice versa
model UsersInOrganisations {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org    Organisation @relation(fields: [orgId], references: [id])
  orgId  Int
  user   User         @relation(fields: [userId], references: [id])
  userId Int
  role   Role

  @@id([orgId, userId])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token      String   @unique
  expiryDate DateTime
  // true indicates that this token has served it purpose successfully (user got verified)
  isArchived Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token      String   @unique
  expiryDate DateTime
  // true indicates that this token has served it purpose successfully (password has been reset)
  isArchived Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model EmailChangeToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token        String   @unique
  expiryDate   DateTime
  newEmail     String
  currentEmail String
  // true indicates that this token has served it purpose successfully (email has been changed)
  isArchived   Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete   Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model UserInvitationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitedEmail String
  token        String   @unique
  role         Role     @default(USER)
  expiryDate   DateTime
  // true indicates that this token has served it purpose successfully (user has accepted the invitation)
  isArchived   Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete   Boolean  @default(false)

  organisation Organisation @relation(fields: [orgId], references: [id])
  orgId        Int
  // the user who invited the email above to the organisation
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
}

model LoggedApiRequests {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ip String

  // the app the request was made for
  app       App    @relation(fields: [appId], references: [id])
  appId     Int
  publicKey String
}
