// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionType {
  BUTTON          @map("button")
  DISMISS_BUTTON  @map("dismiss_button")
}

enum Role {
  USER
  ADMIN
}

model Action {
  id          Int          @id @default(autoincrement())
  actionType  ActionType
  title       String
  Message     Message?     @relation(fields: [messageId], references: [id])
  messageId   Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Message {
  id          Int         @id @default(autoincrement())
  blocking    Boolean
  title       String
  body        String
  actions     Action[]
  startDate   DateTime
  endDate     DateTime
  App         App?        @relation(fields: [appId], references: [id])
  appId       Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model App {
  id          Int         @id @default(autoincrement())
  name        String
  messages    Message[]
  Organisation  Organisation?        @relation(fields: [orgId], references: [id])
  orgId       Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model User {
  id          Int         @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  password    String
  salt        String
  isVerified  Boolean
  token       VerificationToken?
  orgs        UsersInOrganisations[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Organisation {
  id          Int         @id @default(autoincrement())
  name        String
  apps        App[]
  users       UsersInOrganisations[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UsersInOrganisations {
  org         Organisation    @relation(fields: [orgId], references: [id])
  orgId       Int
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@id([orgId, userId])
}

model VerificationToken {
  id          Int         @id @default(autoincrement())
  token       String
  expiryDate  DateTime  
  isArchived  Boolean
  User        User       @relation(fields: [userId], references: [id])
  userId      Int        @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
