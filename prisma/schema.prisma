generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionType {
  DISMISS @map("dismiss")
}

enum ButtonDesign {
  TEXT   @map("text")
  FILLED @map("filled")
}

enum Role {
  USER
  ADMIN
}

enum AppAccessLevel {
  FULL
  // Temporary Tokens are alive for a short duration and will not be displayed in the UI at any time
  TEMP
}

enum OrganisationAccessLevel {
  FULL
}

model Action {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title        String
  actionType   ActionType
  buttonDesign ButtonDesign

  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  body      String
  blocking  Boolean
  startDate DateTime
  endDate   DateTime
  actions   Action[]

  app   App? @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId Int?
}

model App {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  publicKey String    @unique
  messages  Message[]

  // used for reporting metered usage, periodically logged api
  // requests are reported to stripe, starting from this id
  idOfLastReportedApiRequest Int?

  organisation Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        Int?

  loggedApiRequests LoggedApiRequests[]
  appAdminToken     AppAdminToken[]
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?

  email    String?
  password String?
  salt     String?

  // only a verified user can use the functionality of OnLaunch
  isVerified Boolean
  isDeleted  Boolean @default(false)

  token               VerificationToken[]
  passwordToken       PasswordResetToken[]
  emailChangeToken    EmailChangeToken[]
  userInvitationToken UserInvitationToken[]
  orgs                UsersInOrganisations[]
}

model Organisation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  invitationToken String  @unique
  isDeleted       Boolean @default(false)

  // stripe data
  stripeCustomerId String?
  // stripe subscriptions, old ones have an isDeleted flag on true
  subs             Subscription[]
  // create log when reporting usage to stripe
  usageReports     LoggedUsageReport[]

  apps                   App[]
  users                  UsersInOrganisations[]
  userInvitationToken    UserInvitationToken[]
  organisationAdminToken OrganisationAdminToken[]
}

// this model indicates which users are in which organisation (with which role) and vice versa
model UsersInOrganisations {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org    Organisation @relation(fields: [orgId], references: [id])
  orgId  Int
  user   User         @relation(fields: [userId], references: [id])
  userId Int
  role   Role

  @@id([orgId, userId])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token      String   @unique
  expiryDate DateTime
  // true indicates that this token has served it purpose successfully (user got verified)
  isArchived Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token      String   @unique
  expiryDate DateTime
  // true indicates that this token has served it purpose successfully (password has been reset)
  isArchived Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model EmailChangeToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token        String   @unique
  expiryDate   DateTime
  newEmail     String
  currentEmail String
  // true indicates that this token has served it purpose successfully (email has been changed)
  isArchived   Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete   Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model UserInvitationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitedEmail String
  token        String   @unique
  role         Role     @default(USER)
  expiryDate   DateTime
  // true indicates that this token has served it purpose successfully (user has accepted the invitation)
  isArchived   Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete   Boolean  @default(false)

  organisation Organisation @relation(fields: [orgId], references: [id])
  orgId        Int
  // the user who invited the email above to the organisation
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
}

model LoggedApiRequests {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ip String

  // the app the request was made for
  app       App    @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId     Int
  publicKey String @default("")

  // -- Additional context sent with the request --
  // Bundle identifier of the app
  clientBundleId String?
  // Version of the app
  clientBundleVersion String?
  // Locale of the device
  clientLocale String?
  // Language code of the locale
  clientLocaleLanguageCode String?
  // Region code of the locale
  clientLocaleRegionCode String?
  // Name of the platform
  clientPlatformName String?
  // Version of the platform
  clientPlatformVersion String?
  // Version of the release
  clientReleaseVersion String?
}

model LoggedUsageReport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requests            Int
  isReportedAsInvoice Boolean @default(false)

  // the app the request was made for
  org   Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

// This is a table to locally save Stripe subscriptions for organisations
model Subscription {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subId   String @id
  subName String

  isDeleted Boolean @default(false)

  // current billing period, used for reporting metered usage
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime

  subItems SubscriptionItem[]

  org   Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

model SubscriptionItem {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subItemId String  @id
  metered   Boolean @default(false)
  productId String

  sub   Subscription @relation(fields: [subId], references: [subId], onDelete: Cascade)
  subId String
}

model OrganisationAdminToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token String  @unique
  label String?

  // note: there is no expiration date or time for org-level admin tokens
  role      OrganisationAccessLevel @default(FULL)
  // true indicates that this token has been revoked by a user
  isDeleted Boolean                 @default(false)

  // the org the token belongs to
  org   Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

model AppAdminToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token String  @unique
  label String?

  role       AppAccessLevel @default(FULL)
  expiryDate DateTime?
  // true indicates that this token has been revoked by a user
  isDeleted  Boolean        @default(false)

  // the app the token belongs to
  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId Int
}

// As a safety measure, the admin api is rate-limited
model LoggedAdminApiRequests {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ip String
  token   String  @default("")
  // The success flag is used to indicate whether the provided token is an active one
  // this is used to prevent brute force attacks
  success Boolean @default(false)
}
