generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionType {
  DISMISS @map("dismiss")
}

enum ButtonDesign {
  TEXT   @map("text")
  FILLED @map("filled")
}

enum Role {
  USER
  ADMIN
}

enum AppAccessLevel {
  FULL
  // Temporary Tokens are alive for a short duration and will not be displayed in the UI at any time
  TEMP
}

enum OrganisationAccessLevel {
  FULL
}

model MessageAction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title        String
  actionType   ActionType
  buttonDesign ButtonDesign

  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  body      String
  blocking  Boolean
  startDate DateTime
  endDate   DateTime
  actions   MessageAction[]

  filter MessageFilter?

  // A back-reference to the app
  appId Int?
  app   App? @relation(fields: [appId], references: [id], onDelete: Cascade)
}

model MessageFilter {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Only the root group has a reference to the message rule
  ruleGroupId Int?
  ruleGroup   MessageRuleGroup? @relation(fields: [ruleGroupId], references: [id], onDelete: Cascade)

  // Back-reference to the message
  messageId Int?     @unique
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

enum MessageRuleGroupOperator {
  AND
  OR
}

// Define a new model for RuleBlock to represent AND-BLOCKs and OR-BLOCKs
model MessageRuleGroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  operator   MessageRuleGroupOperator
  conditions MessageRuleCondition[]
  groups     MessageRuleGroup[]       @relation("groups")

  // Create a child-to-parent relation for the nested tree structure
  parentGroupId Int?
  parentGroup   MessageRuleGroup? @relation("groups", fields: [parentGroupId], references: [id])

  parentMessageFilter MessageFilter[]
}

enum MessageRuleConditionComparator {
  // Equality Operators
  EQUALS
  IS_NOT_EQUAL

  // Comparison Operators
  IS_GREATER_THAN
  IS_GREATER_THAN_OR_EQUAL
  IS_LESS_THAN
  IS_LESS_THAN_OR_EQUAL

  // String Operators
  CONTAINS
  DOES_NOT_CONTAIN
  IS_EMPTY
  IS_NOT_EMPTY

  // Boolean Operators
  IS_NULL
  IS_NOT_NULL
  IS_TRUE
  IS_FALSE

  // Date Operators
  IS_AFTER
  IS_BEFORE
  IS_AFTER_OR_EQUAL
  IS_BEFORE_OR_EQUAL

  // Regex Operators
  MATCHES_REGEX
  DOES_NOT_MATCH_REGEX
}

model MessageRuleCondition {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  systemVariable String
  comparator     MessageRuleConditionComparator
  userVariable   String?

  // Create a reference to the parent group
  parentGroupId Int
  parentGroup   MessageRuleGroup @relation(fields: [parentGroupId], references: [id], onDelete: Cascade)
}

model App {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  name      String
  publicKey String    @unique
  messages  Message[]

  // used for reporting metered usage, periodically logged api
  // requests are reported to stripe, starting from this id
  idOfLastReportedApiRequest Int?

  organisation Organisation? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        Int?

  loggedApiRequests LoggedApiRequests[]
  appAdminToken     AppAdminToken[]
}

model User {
  id     Int    @id @default(autoincrement())
  // authId is the id of the user in the authentication provider (e.g. Auth0)
  authId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?

  email    String?
  password String?
  salt     String?

  // only a verified user can use the functionality of OnLaunch
  isVerified Boolean
  verifiedAt DateTime?

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  token               VerificationToken[]
  passwordToken       PasswordResetToken[]
  emailChangeToken    EmailChangeToken[]
  userInvitationToken UserInvitationToken[]
  orgs                UsersInOrganisations[]

  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
}

model Organisation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String
  invitationToken String    @unique
  isDeleted       Boolean   @default(false)
  deletedAt       DateTime?

  // stripe data
  stripeCustomerId String?
  // stripe subscriptions, old ones have an isDeleted flag on true
  subs             Subscription[]
  // create log when reporting usage to stripe
  usageReports     LoggedUsageReport[]

  apps                   App[]
  users                  UsersInOrganisations[]
  userInvitationToken    UserInvitationToken[]
  organisationAdminToken OrganisationAdminToken[]
}

// this model indicates which users are in which organisation (with which role) and vice versa
model UsersInOrganisations {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  org    Organisation @relation(fields: [orgId], references: [id])
  orgId  Int
  user   User         @relation(fields: [userId], references: [id])
  userId Int
  role   Role

  @@id([orgId, userId])
}

model AuthToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String
  expiresAt  DateTime

  // true indicates that this token has served it purpose successfully (user got verified)
  isArchived Boolean @default(false)

  @@unique([identifier, token])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token      String   @unique
  expiryDate DateTime
  // true indicates that this token has served it purpose successfully (user got verified)
  isArchived Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token      String   @unique
  expiryDate DateTime
  // true indicates that this token has served it purpose successfully (password has been reset)
  isArchived Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model EmailChangeToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token        String   @unique
  expiryDate   DateTime
  newEmail     String
  currentEmail String
  // true indicates that this token has served it purpose successfully (email has been changed)
  isArchived   Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete   Boolean  @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model UserInvitationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitedEmail String
  token        String   @unique
  role         Role     @default(USER)
  expiryDate   DateTime
  // true indicates that this token has served it purpose successfully (user has accepted the invitation)
  isArchived   Boolean  @default(false)
  // indicates that this token has been replaced with a newer one and therefore is invalid
  isObsolete   Boolean  @default(false)

  organisation Organisation @relation(fields: [orgId], references: [id])
  orgId        Int
  // the user who invited the email above to the organisation
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
}

model LoggedApiRequests {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ip String

  // the app the request was made for
  app       App    @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId     Int
  publicKey String @default("")

  // -- Additional context sent with the request --
  // Bundle identifier of the app
  clientBundleId           String?
  // Version of the app
  clientBundleVersion      String?
  // Locale of the device
  clientLocale             String?
  // Language code of the locale
  clientLocaleLanguageCode String?
  // Region code of the locale
  clientLocaleRegionCode   String?
  // Name of the package
  clientPackageName        String?
  // Name of the platform
  clientPlatformName       String?
  // Version of the platform
  clientPlatformVersion    String?
  // Version of the release
  clientReleaseVersion     String?
  // Version code of the package
  clientVersionCode        String?
  // Version name of the package
  clientVersionName        String?
  // Flag if update was available at the client
  clientUpdateAvailable    Boolean?
}

model LoggedUsageReport {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requests            Int
  isReportedAsInvoice Boolean @default(false)

  // the app the request was made for
  org   Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

// This is a table to locally save Stripe subscriptions for organisations
model Subscription {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subId   String @id
  subName String

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  // current billing period, used for reporting metered usage
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime

  subItems SubscriptionItem[]

  org   Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

model SubscriptionItem {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subItemId String  @id
  metered   Boolean @default(false)
  productId String

  sub   Subscription @relation(fields: [subId], references: [subId], onDelete: Cascade)
  subId String
}

model OrganisationAdminToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token String  @unique
  label String?

  // note: there is no expiration date or time for org-level admin tokens
  role      OrganisationAccessLevel @default(FULL)
  // true indicates that this token has been revoked by a user
  isDeleted Boolean                 @default(false)
  deletedAt DateTime?

  // the org the token belongs to
  org   Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId Int
}

model AppAdminToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  token String  @unique
  label String?

  role       AppAccessLevel @default(FULL)
  expiryDate DateTime?
  // true indicates that this token has been revoked by a user
  isDeleted  Boolean        @default(false)
  deletedAt  DateTime?

  // the app the token belongs to
  app   App @relation(fields: [appId], references: [id], onDelete: Cascade)
  appId Int
}

// As a safety measure, the admin api is rate-limited
model LoggedAdminApiRequests {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ip        String
  token     String   @default("")
  // The success flag is used to indicate whether the provided token is an active one
  // this is used to prevent brute force attacks
  success   Boolean  @default(false)
}

// Used by Next-Auth to store authenticator data, used for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresIn         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  expires DateTime

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
